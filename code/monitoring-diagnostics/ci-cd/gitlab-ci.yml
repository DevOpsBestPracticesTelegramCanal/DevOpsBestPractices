# GitLab CI/CD Pipeline для диагностики и развертывания мониторинга
# GitHub: https://github.com/DevOpsBestPracticesTelegramCanal/DevOpsBestPractices
# Telegram: @DevOps_best_practices

stages:
  - diagnostic
  - test
  - deploy
  - verify

variables:
  READINESS_THRESHOLD: "70"

# Диагностика системы перед развертыванием
monitoring-diagnostic:
  stage: diagnostic
  image: ubuntu:22.04
  before_script:
    - apt-get update -qq && apt-get install -y -qq curl wget python3 python3-pip lsof
    - pip3 install --quiet psutil requests
  script:
    - echo "[DIAGNOSTIC] Запуск диагностики системы..."
    - chmod +x ./code/monitoring-diagnostics/scripts/mega-diagnostic.sh
    - ./code/monitoring-diagnostics/scripts/mega-diagnostic.sh
    - echo "[ANALYZER] Запуск Python анализатора..."
    - python3 ./code/monitoring-diagnostics/scripts/monitoring-analyzer.py
    - |
      SCORE=$(grep -o '"readiness_score": [0-9]*' monitoring_analysis_*.json | grep -o '[0-9]*' | head -1)
      echo "[SCORE] Оценка готовности: $SCORE%"
      if [ "$SCORE" -lt "$READINESS_THRESHOLD" ]; then
        echo "[NOT_READY] Система не готова. Оценка: $SCORE% (минимум: $READINESS_THRESHOLD%)"
        exit 1
      else
        echo "[READY] Система готова к развертыванию!"
      fi
  artifacts:
    reports:
      junit: diagnostic.log
    paths:
      - diagnostic.log
      - diagnostic_report.json
      - monitoring_analysis_*.json
    expire_in: 1 week
    when: always
  only:
    - main
    - develop
    - merge_requests

# Тестирование скриптов
test-scripts:
  stage: test
  image: python:3.11-slim
  before_script:
    - pip install pytest pytest-cov
  script:
    - echo "[TESTS] Запуск тестов скриптов..."
    - python -m pytest code/monitoring-diagnostics/tests/ -v --cov=code/monitoring-diagnostics/scripts/
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  only:
    - main
    - develop
    - merge_requests

# Развертывание мониторинга
deploy-monitoring:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - monitoring-diagnostic
  before_script:
    - apk add --no-cache docker-compose curl
  script:
    - echo "[DEPLOY] Развертывание стека мониторинга..."
    - cd code/monitoring-diagnostics/templates/
    - docker-compose up -d
    - echo "[WAIT] Ожидание запуска сервисов..."
    - sleep 30
  after_script:
    - echo "[STATUS] Статус контейнеров:"
    - docker-compose ps
  environment:
    name: monitoring
    url: http://$CI_SERVER_HOST:3000
  only:
    - main
  when: manual

# Проверка работоспособности
verify-monitoring:
  stage: verify
  image: curlimages/curl:latest
  dependencies:
    - deploy-monitoring
  script:
    - echo "[VERIFY] Проверка доступности сервисов..."
    - |
      # Проверка Prometheus
      echo "[PROMETHEUS] Проверка Prometheus..."
      curl -f http://localhost:9090/-/healthy || {
        echo "[ERROR] Prometheus недоступен"
        exit 1
      }
      
      # Проверка Grafana
      echo "[GRAFANA] Проверка Grafana..."
      curl -f http://localhost:3000/api/health || {
        echo "[ERROR] Grafana недоступен" 
        exit 1
      }
      
      # Проверка Alertmanager
      echo "[ALERTMANAGER] Проверка Alertmanager..."
      curl -f http://localhost:9093/-/healthy || {
        echo "[ERROR] Alertmanager недоступен"
        exit 1
      }
      
      echo "[OK] Все сервисы работают корректно!"
  retry:
    max: 3
    when: 
      - script_failure
  only:
    - main

# Очистка при ошибках
cleanup-on-failure:
  stage: verify
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "[CLEANUP] Очистка при ошибке развертывания..."
    - cd code/monitoring-diagnostics/templates/
    - docker-compose down -v
    - docker system prune -f
  when: on_failure
  only:
    - main

# Уведомления в Telegram
notify-telegram:
  stage: verify
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      if [ "$CI_JOB_STATUS" = "success" ]; then
        MESSAGE="[SUCCESS] Мониторинг успешно развернут в проекте $CI_PROJECT_NAME"
      else
        MESSAGE="[FAILED] Ошибка развертывания мониторинга в проекте $CI_PROJECT_NAME"
      fi
      
      curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -d chat_id="$TELEGRAM_CHAT_ID" \
        -d text="$MESSAGE
      
      Проект: $CI_PROJECT_NAME
      Ветка: $CI_COMMIT_REF_NAME
      Автор: $GITLAB_USER_NAME
      Pipeline: $CI_PIPELINE_URL"
  variables:
    TELEGRAM_BOT_TOKEN: $TELEGRAM_BOT_TOKEN
    TELEGRAM_CHAT_ID: $TELEGRAM_CHAT_ID
  when: always
  only:
    - main
  allow_failure: true