# GitLab CI/CD Pipeline –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# GitHub: https://github.com/DevOpsBestPracticesTelegramCanal/DevOpsBestPractices
# Telegram: @DevOps_best_practices

stages:
  - diagnostic
  - test
  - deploy
  - verify

variables:
  READINESS_THRESHOLD: "70"

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º
monitoring-diagnostic:
  stage: diagnostic
  image: ubuntu:22.04
  before_script:
    - apt-get update -qq && apt-get install -y -qq curl wget python3 python3-pip lsof
    - pip3 install --quiet psutil requests
  script:
    - echo "üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã..."
    - chmod +x ./code/monitoring-diagnostics/scripts/mega-diagnostic.sh
    - ./code/monitoring-diagnostics/scripts/mega-diagnostic.sh
    - echo "üêç –ó–∞–ø—É—Å–∫ Python –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞..."
    - python3 ./code/monitoring-diagnostics/scripts/monitoring-analyzer.py
    - |
      SCORE=$(grep -o '"readiness_score": [0-9]*' monitoring_analysis_*.json | grep -o '[0-9]*' | head -1)
      echo "üìä –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: $SCORE%"
      if [ "$SCORE" -lt "$READINESS_THRESHOLD" ]; then
        echo "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞. –û—Ü–µ–Ω–∫–∞: $SCORE% (–º–∏–Ω–∏–º—É–º: $READINESS_THRESHOLD%)"
        exit 1
      else
        echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!"
      fi
  artifacts:
    reports:
      junit: diagnostic.log
    paths:
      - diagnostic.log
      - diagnostic_report.json
      - monitoring_analysis_*.json
    expire_in: 1 week
    when: always
  only:
    - main
    - develop
    - merge_requests

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
test-scripts:
  stage: test
  image: python:3.11-slim
  before_script:
    - pip install pytest pytest-cov
  script:
    - echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∫—Ä–∏–ø—Ç–æ–≤..."
    - python -m pytest code/monitoring-diagnostics/tests/ -v --cov=code/monitoring-diagnostics/scripts/
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  only:
    - main
    - develop
    - merge_requests

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
deploy-monitoring:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - monitoring-diagnostic
  before_script:
    - apk add --no-cache docker-compose curl
  script:
    - echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç–µ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    - cd code/monitoring-diagnostics/templates/
    - docker-compose up -d
    - echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    - sleep 30
  after_script:
    - echo "üìã –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    - docker-compose ps
  environment:
    name: monitoring
    url: http://$CI_SERVER_HOST:3000
  only:
    - main
  when: manual

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
verify-monitoring:
  stage: verify
  image: curlimages/curl:latest
  dependencies:
    - deploy-monitoring
  script:
    - echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    - |
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ Prometheus
      echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ Prometheus..."
      curl -f http://localhost:9090/-/healthy || {
        echo "‚ùå Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        exit 1
      }
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ Grafana
      echo "üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ Grafana..."
      curl -f http://localhost:3000/api/health || {
        echo "‚ùå Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" 
        exit 1
      }
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ Alertmanager
      echo "üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ Alertmanager..."
      curl -f http://localhost:9093/-/healthy || {
        echo "‚ùå Alertmanager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        exit 1
      }
      
      echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
  retry:
    max: 3
    when: 
      - script_failure
  only:
    - main

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
cleanup-on-failure:
  stage: verify
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    - cd code/monitoring-diagnostics/templates/
    - docker-compose down -v
    - docker system prune -f
  when: on_failure
  only:
    - main

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
notify-telegram:
  stage: verify
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      if [ "$CI_JOB_STATUS" = "success" ]; then
        MESSAGE="‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ $CI_PROJECT_NAME"
        EMOJI="üöÄ"
      else
        MESSAGE="‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ $CI_PROJECT_NAME"
        EMOJI="üí•"
      fi
      
      curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -d chat_id="$TELEGRAM_CHAT_ID" \
        -d text="$EMOJI $MESSAGE
      
      üìÅ –ü—Ä–æ–µ–∫—Ç: $CI_PROJECT_NAME
      üåø –í–µ—Ç–∫–∞: $CI_COMMIT_REF_NAME
      üë§ –ê–≤—Ç–æ—Ä: $GITLAB_USER_NAME
      üîó Pipeline: $CI_PIPELINE_URL"
  variables:
    TELEGRAM_BOT_TOKEN: $TELEGRAM_BOT_TOKEN
    TELEGRAM_CHAT_ID: $TELEGRAM_CHAT_ID
  when: always
  only:
    - main
  allow_failure: true