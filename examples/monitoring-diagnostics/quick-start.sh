#!/bin/bash
# quick-start.sh - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# GitHub: https://github.com/DevOpsBestPracticesTelegramCanal/DevOpsBestPractices
# Telegram: @DevOps_best_practices

set -euo pipefail

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${BLUE}üöÄ DevOps Best Practices - Monitoring Diagnostics Demo${NC}"
echo -e "${BLUE}üìÅ GitHub: https://github.com/DevOpsBestPracticesTelegramCanal/DevOpsBestPractices${NC}"
echo -e "${BLUE}üí¨ Telegram: @DevOps_best_practices${NC}"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    
    local deps=("bash" "python3" "docker")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            missing+=("$dep")
        fi
    done
    
    if [ ${#missing[@]} -ne 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing[*]}${NC}"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –¥–µ–º–æ"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
run_demo() {
    echo ""
    echo -e "${BLUE}üìã –ß—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:${NC}"
    echo "1. üîç Bash-—Å–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (mega-diagnostic.sh)"
    echo "2. üêç Python –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (monitoring-analyzer.py)"
    echo "3. üìä –û—Ç—á–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    echo ""
    
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "–î–µ–º–æ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        exit 0
    fi
    
    echo ""
    echo -e "${BLUE}üî• –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...${NC}"
    
    # 1. Bash –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    echo ""
    echo -e "${BLUE}1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ bash-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...${NC}"
    if [ -f "../code/monitoring-diagnostics/scripts/mega-diagnostic.sh" ]; then
        chmod +x "../code/monitoring-diagnostics/scripts/mega-diagnostic.sh"
        bash "../code/monitoring-diagnostics/scripts/mega-diagnostic.sh"
    else
        echo -e "${YELLOW}‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç mega-diagnostic.sh –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    
    echo ""
    echo -e "${BLUE}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${NC}"
    read
    
    # 2. Python –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    echo ""
    echo -e "${BLUE}2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ Python –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...${NC}"
    if [ -f "../code/monitoring-diagnostics/scripts/monitoring-analyzer.py" ]; then
        python3 "../code/monitoring-diagnostics/scripts/monitoring-analyzer.py"
    else
        echo -e "${YELLOW}‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç monitoring-analyzer.py –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    
    echo ""
    echo -e "${BLUE}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${NC}"
    read
    
    # 3. –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    echo ""
    echo -e "${BLUE}3Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:${NC}"
    
    if [ -f "diagnostic.log" ]; then
        echo -e "${GREEN}üìÑ diagnostic.log —Å–æ–∑–¥–∞–Ω${NC}"
        echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫:"
        tail -10 diagnostic.log
    fi
    
    if [ -f "diagnostic_report.json" ]; then
        echo -e "${GREEN}üìä diagnostic_report.json —Å–æ–∑–¥–∞–Ω${NC}"
        if command -v jq >/dev/null 2>&1; then
            echo "–û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:"
            jq '.readiness_score' diagnostic_report.json
        fi
    fi
    
    echo ""
    local analysis_file=$(ls monitoring_analysis_*.json 2>/dev/null | head -1 || echo "")
    if [ -n "$analysis_file" ]; then
        echo -e "${GREEN}üêç $analysis_file —Å–æ–∑–¥–∞–Ω${NC}"
        if command -v jq >/dev/null 2>&1; then
            echo "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:"
            jq '.summary.message' "$analysis_file"
        fi
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
show_next_steps() {
    echo ""
    echo -e "${BLUE}üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
    echo ""
    echo "1. üìñ –ò–∑—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:"
    echo "   - diagnostic.log - –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
    echo "   - diagnostic_report.json - JSON –æ—Ç—á–µ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
    echo "   - monitoring_analysis_*.json - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Python –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"
    echo ""
    echo "2. üîß –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    echo "   - ../code/monitoring-diagnostics/scripts/fixes/"
    echo ""
    echo "3. üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
    echo "   - docker-compose -f ../code/monitoring-diagnostics/templates/docker-compose.yml up -d"
    echo ""
    echo "4. üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –ø—Ä–∏–º–µ—Ä—ã:"
    echo "   - https://github.com/DevOpsBestPracticesTelegramCanal/DevOpsBestPractices"
    echo ""
    echo "5. üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:"
    echo "   - Telegram: @DevOps_best_practices"
    echo ""
}

# –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–µ–º–æ
cleanup_demo() {
    echo ""
    read -p "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã –¥–µ–º–æ? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -f diagnostic.log diagnostic_report.json monitoring_analysis_*.json
        echo -e "${GREEN}üßπ –§–∞–π–ª—ã –¥–µ–º–æ —É–¥–∞–ª–µ–Ω—ã${NC}"
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_dependencies
    run_demo
    show_next_steps
    cleanup_demo
    
    echo ""
    echo -e "${GREEN}‚ú® –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ DevOps Best Practices${NC}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
trap 'echo -e "\n‚õî –î–µ–º–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; exit 1' INT

# –ó–∞–ø—É—Å–∫
main "$@"